// Media queries breakpoints
// Define the breakpoints at which your layout will change, adapting to
// different screen sizes.

// Grid system
// Define your custom responsive grid.

// Number of columns in the grid.
$grid-columns:             12 !default
// Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:        40px !default

// Container sizes
// Define the maximum width of .container for different screen sizes.

// Small screen / tablet
$container-sm:             (720px + $grid-gutter-width) !default

// Medium screen / desktop
$container-md:             (920px + $grid-gutter-width) !default

// Large screen / wide desktop
$container-lg:             (920px + $grid-gutter-width) !default


=make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}")
  @for $i from (1 + 1) through $grid-columns
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}"

  #{$list}
    position: relative
    display: block
    min-height: 1px
    padding-left:  ($grid-gutter-width / 2)
    padding-right: ($grid-gutter-width / 2)
    box-sizing: border-box

    img
      max-width: 100%
      height: auto

=float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}")
  @for $i from (1 + 1) through $grid-columns
    $list: "#{$list}, .col-#{$class}-#{$i}"

  #{$list}
    float: left

=calc-grid-column($index, $class, $type)
  @if ($type == width) and ($index > 0)
    .col-#{$class}-#{$index}
      width: percentage(($index / $grid-columns))

  @if ($type == push) and ($index > 0)
    .col-#{$class}-push-#{$index}
      left: percentage(($index / $grid-columns))

  @if ($type == push) and ($index == 0)
    .col-#{$class}-push-0
      left: auto

  @if ($type == pull) and ($index > 0)
    .col-#{$class}-pull-#{$index}
      right: percentage(($index / $grid-columns))

  @if ($type == pull) and ($index == 0)
    .col-#{$class}-pull-0
      right: auto

  @if ($type == offset)
    .col-#{$class}-offset-#{$index}
      margin-left: percentage(($index / $grid-columns))

=loop-grid-columns($columns, $class, $type)
  @for $i from 0 through $columns
    +calc-grid-column($i, $class, $type)

// Create grid for specific class
=make-grid($class)
  +float-grid-columns($class)
  +loop-grid-columns($grid-columns, $class, width)
  +loop-grid-columns($grid-columns, $class, pull)
  +loop-grid-columns($grid-columns, $class, push)
  +loop-grid-columns($grid-columns, $class, offset)

// Centered container element
=container-fixed($gutter: $grid-gutter-width)
  margin-right: auto
  margin-left: auto
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)
  +clearfix()

// Creates a wrapper for a series of columns
=make-row($gutter: $grid-gutter-width)
  margin-left:  ($gutter / -2)
  margin-right: ($gutter / -2)
  +clearfix()

// Generate the extra small columns
=make-xs-column($columns, $gutter: $grid-gutter-width)
  position: relative
  float: left
  width: percentage(($columns / $grid-columns))
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

=make-xs-column-offset($columns)
  margin-left: percentage(($columns / $grid-columns))

=make-xs-column-push($columns)
  left: percentage(($columns / $grid-columns))

=make-xs-column-pull($columns)
  right: percentage(($columns / $grid-columns))

// Generate the small columns
=make-sm-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-sm-min)
    float: left
    width: percentage(($columns / $grid-columns))

=make-sm-column-offset($columns)
  @media (min-width: $screen-sm-min)
    margin-left: percentage(($columns / $grid-columns))

=make-sm-column-push($columns)
  @media (min-width: $screen-sm-min)
    left: percentage(($columns / $grid-columns))

=make-sm-column-pull($columns)
  @media (min-width: $screen-sm-min)
    right: percentage(($columns / $grid-columns))

// Generate the medium columns
=make-md-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-md-min)
    float: left
    width: percentage(($columns / $grid-columns))

=make-md-column-offset($columns)
  @media (min-width: $screen-md-min)
    margin-left: percentage(($columns / $grid-columns))

=make-md-column-push($columns)
  @media (min-width: $screen-md-min)
    left: percentage(($columns / $grid-columns))

=make-md-column-pull($columns)
  @media (min-width: $screen-md-min)
    right: percentage(($columns / $grid-columns))

// Generate the large columns
=make-lg-column($columns, $gutter: $grid-gutter-width)
  position: relative
  min-height: 1px
  padding-left:  ($gutter / 2)
  padding-right: ($gutter / 2)

  @media (min-width: $screen-lg-min)
    float: left
    width: percentage(($columns / $grid-columns))

=make-lg-column-offset($columns)
  @media (min-width: $screen-lg-min)
    margin-left: percentage(($columns / $grid-columns))

=make-lg-column-push($columns)
  @media (min-width: $screen-lg-min)
    left: percentage(($columns / $grid-columns))

=make-lg-column-pull($columns)
  @media (min-width: $screen-lg-min)
    right: percentage(($columns / $grid-columns))

// Grid system
// Container widths
// Set the container width, and override it for fixed navbars in media queries.

.container
  +container-fixed()

  @media (min-width: $screen-sm-min)
    width: $container-sm

  @media (min-width: $screen-md-min)
    width: $container-md

  @media (min-width: $screen-lg-min)
    width: $container-lg

  @media print
    margin: 0

// Fluid container
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid
  +container-fixed()

// Row
// Rows contain and clear the floats of your columns.

.row
  +make-row()

// Columns
// Common styles for small and large grid columns

+make-grid-columns()

// Extra small grid
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

+make-grid(xs)

// Small grid
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min)
  +make-grid(sm)

// Medium grid
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min)
  +make-grid(md)

// Large grid
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min)
  +make-grid(lg)
